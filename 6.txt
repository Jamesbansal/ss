6. A) Program to recognize a valid arithmetic expression that uses operates +,-,*,/
Program: lab6a.l
Code:
%{
#include”y.tab.h”
%}
%%
[0-9]+(\•[0-9]+)? {return NUM;}
[a-zA-Z][_a-zA-Z0-9]* {return ID;}
[\t] ;
\nreturn 0;
• return yytext[0];
%%
Program: lab6a.y
Code:
%{
#include<stdio.h>
%}
%token NUM ID
%left ‘+’’-‘
%left’*’’/’
%%
e:e’+’e
| e’-‘e
| e’*’e
| e’/’e
| ‘(‘e’)’
| NUM
I ID ;
%%
main()
{
printf(“\nType the expression to be tested\n”);
yyparse();
printf(“\nValid expression\n”);
}
yyerror()
{
printf(“\n Invalid expression! \n”);
exit(0);
}
How to run above program
$ lex lab6a.l
$ yacc –d lab6a.y // => Generates y.tab.h file
$ cc lex.yy.c –ll // => -ll links with lex library
$ ./a.out
Input & Output:
Enter an arithmetic expression
a1+b2-9/8
^d
valid expression




b) Program to recognize a valid variable, which starts with a letter, followed by any number of letters or digits
6b.l
%{
#include "y.tab.h"
%}
%%
[a-z] return L;
[0-9] return D;
\n {return NL;}
18
%%
int yywrap() { }
6b.y
%{
#include<stdio.h>
%}
%token L D NL
%%
var: L E NL {printf("Valid Variable\n");return 0;}
E: E L
| E D
| ;
%%
int yyerror()
{
printf("\n Invalid Variable\n");
return 0;
}
int main()
{
printf("\nEnter a variable\n");
yyparse();
}
Command for execution: 
lex pgm_name.l
19
OR
Flex pgm.l
Yacc -y -d pgm_name.y
OR
Bison -y -d pgm_name.y
gcc lex.yy.c y.tab.c -o pgm_name.exe
pgm_name.exe
