4. a) Lex program to recognize a valid arithmetic expression and to recognize identifiers and operators present and 
print them separately
%{
#include <stdio.h>
int ext(int);
int a[]={0,0,0,0},valid=1,opnd=0,top=-1,i;
%}
%x oper
%%
["("] {top++;}
[")"] {top--;}
[a-zA-Z0-9]+ {BEGIN oper; opnd++;}
<oper>"+" {if(valid) {valid = 0; i = 0;} else ext(0);}
<oper>"-" {if(valid) {valid = 0; i = 1;} else ext(0);}
<oper>"*" {if(valid) {valid = 0; i = 2;} else ext(0);}
<oper>"/" {if(valid) {valid = 0; i = 3;} else ext(0);}
<oper>"(" {top++;}
<oper>")" {top--;}
<oper>[a-zA-Z0-9]+ {opnd++; if(valid == 0) {valid = 1; a[i]++;} else 
ext(0);}
<oper>"\n" {if(valid == 1 && top == -1) {printf("Valid 
expression\n"); return 0;} else ext(0);}
.\n ext(0);
%%
int yywrap() { }
int ext(int x)
{
printf("\nInvalid expression%d\n",x);
exit(0);
}
int main()
{
printf("\nEnter an arithmetic expression\n");
yylex();
printf("Number of operands = %d\n",opnd);
printf("Number of + = %d\n",a[0]);
printf("Number of - = %d\n",a[1]);
printf("Number of * = %d\n",a[2]);
printf("Number of / = %d\n",a[3]);
return 0;
}
9
Command for execution: 
lex pgm_name.l
OR
Flex pgm.l
gcc lex.yy.c -o pgm_name.exe
pgm_name.exe



b) Program to check whether a given sentence is simple or compound
%{
#include<stdio.h>
%}
ws [ \t\n]
%%
{ws}"and"{ws}|{ws}"AND"{ws} | 
{ws}"or"{ws}|{ws}"OR"{ws} | 
{ws}"but"{ws}|{ws}"BUT"{ws} |
{ws}"because"{ws} |
{ws}"nevertheless"{ws} {printf("compound sentence\n");exit(0);}
. ;
\n return 0;
%%
int yywrap() { }
int main()
{
printf("\nEnter a sentence\n");
yylex();
printf("Simple sentence");
exit(0);
//return 0;
10
}
Command for execution: 
lex pgm_name.l
OR
Flex pgm.l
gcc lex.yy.c -o pgm_name.exe
pgm_name.exe