3. a) Program to count the number of characters, words, spaces and lines from a given input file.
%{
#include <stdio.h>
int wc=0,cc=0,lc=0,bc=0;
char infile[25];
%}
word [a-zA-Z0-9]+
eol [\n]
%%
{word} {wc++; cc+=yyleng;}
{eol} {lc++; cc++;}
[" "] {bc++; cc++;}
[\t] {bc+=8; cc++;}
. {cc++;}
%%
int yywrap() 
{ }
int main()
{
printf("\nRead the input file\n");
scanf("%s",infile);
yyin=fopen(infile,"r");
yylex();
printf("Number of characters = %d\n",cc);
printf("Number of words = %d\n",wc);
printf("Number of spaces = %d\n",bc);
printf("Number of lines = %d\n",lc);
return 0;
fclose(yyin);
}
Command for execution: 
lex pgm_name.l
OR
Flex pgm.l
gcc lex.yy.c -o pgm_name.exe
pgm_name.exe



b) Program to count the number of comment lines in a given C Program. Also eliminate them and copy it to a 
separate file.
%{
#include <stdio.h>
int cc=0;
%}
%x CMNT
%%
"/*" {BEGIN CMNT;}
<CMNT>. ; 
<CMNT>"*/" {BEGIN 0; cc++;}
%%
int yywrap() { }
int main(int argc, char *argv[])
{
if(argc!=3)
{
printf("Usage : %s <scr_file> <dest_file>\n",argv[0]);
return 0;
}
yyin=fopen(argv[1],"r");
yyout=fopen(argv[2],"w");
yylex();
printf("\nNumber of multiline comments = %d\n",cc);
return 0;
}
Command for execution: 
lex pgm_name.l
OR
Flex pgm.l
7
gcc lex.yy.c -o pgm_name.exe
pgm_name.exe